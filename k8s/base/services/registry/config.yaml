apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-config
  namespace: registry
data:
  config.yml: |
    version: 0.1
    log:
      level: debug
      formatter: text
      fields:
        service: registry
        environment: staging
      hooks:
        - type: mail
          disabled: true
          levels:
            - panic
          options:
            smtp:
              addr: smtp.eu.mailgun.org:2525
              username: noreply@mail.loeffelmeister.de
              # TODO: override with env var
              password: password
              insecure: true
            from: noreply@mail.loeffelmeister.de
            to:
              - kraetschmerni@gmail.com
    storage:
      filesystem:
        rootdirectory: /var/lib/registry
        maxthreads: 100
      tag:
        concurrencylimit: 8
      delete:
        enabled: false
      redirect:
        disable: false
      cache:
        blobdescriptor: redis
        blobdescriptorsize: 10000
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
        readonly:
          enabled: false
    auth:
      token:
          realm: https://auth.loeffelmeister.de/realms/loeffel/protocol/docker-v2/auth
          service: docker-registry
          issuer: https://auth.loeffelmeister.de/realms/loeffel
          rootcertbundle: /etc/distribution/certbundle.pem
          jwks: /etc/distribution/jwks.json
    http:
      addr: 0.0.0.0:5000
      prefix: /
      host: https://cr.lffl.me
      relativeurls: false
      draintimeout: 60s
      http2:
        disabled: false
      h2c:
        enabled: false
    redis:
      addrs: [redis:6379]
      db: 0
      dialtimeout: 10ms
      readtimeout: 10ms
      writetimeout: 10ms
      maxidleconns: 16
      poolsize: 64
      password: password
      connmaxidletime: 300s
      tls:
        enabled: false
  jwks.json: |
    {
      "keys": [
        {
          "kid": "DTTE:4NIS:3MY7:ORN2:TQQD:VJPE:OEF3:JPK7:PSEH:IF2A:3OTU:FU5H",
          "kty": "RSA",
          "alg": "RS256",
          "use": "sig",
          "n": "j77gi9xVKwS6HSc26KrelYtBRJRQclySmoB4k6sd1joNvGDvrOXWbdWV2ODb9r-A-sHdA3LY-GsgSl_N-WjHTd0eJMmKtIC3rbhUmQuiTXrLE8Gg00cMBra0Ir9S1n6sGvvjm8d-cqT_QcnJ_ZTg4v8q2nc21w6CfMRExi69o2YlIV3K3H7JMebyEmpTm8i6LMnMKZsLZGMe8JRpBbWB6GiqNwWgIxEcfaSp1XTNhLbI1lD7OIj6QKSM28I7qXqoPaP7FFMvnt_aIQSZR8VTXdw-UTNIspQsdldF-AXNdD3-jj07at7bILbypJMHJvmegYTGekNiGS29tZr486IUDw",
          "e": "AQAB",
          "x5c": [
            "MIICnTCCAYUCBgGMhDSuQzANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDDAdsb2VmZmVsMB4XDTIzMTIxOTIyMjk1NFoXDTMzMTIxOTIyMzEzNFowEjEQMA4GA1UEAwwHbG9lZmZlbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAI++4IvcVSsEuh0nNuiq3pWLQUSUUHJckpqAeJOrHdY6Dbxg76zl1m3Vldjg2/a/gPrB3QNy2PhrIEpfzflox03dHiTJirSAt624VJkLok16yxPBoNNHDAa2tCK/UtZ+rBr745vHfnKk/0HJyf2U4OL/Ktp3NtcOgnzERMYuvaNmJSFdytx+yTHm8hJqU5vIuizJzCmbC2RjHvCUaQW1gehoqjcFoCMRHH2kqdV0zYS2yNZQ+ziI+kCkjNvCO6l6qD2j+xRTL57f2iEEmUfFU13cPlEzSLKULHZXRfgFzXQ9/o49O2re2yC28qSTByb5noGExnpDYhktvbWa+POiFA8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAZnxaqJcylrJfjo7Oma6YApvPSTyEEkCJlQIBOYeuVgbtwfMkDgDJHFNAqIDALhJtd1PlGUM2qhSbGT4ycLfkOoyZFHqMaiyPPAPdsct0cd2Z1YNTA6JT43a0z8Lg2LaV1ym9rpmDJQnbTyM3PW9l27Lbl+KpPHbYCeiXWX0mAgF8EYVid4BDVtnnT5qevhCkc/eYdEpCIkRn5i9mmKo5Nps5ed/rEpXEBrz+gIx7L5BhJXlGRJq+fe9KQMO7F/n9lTTiyOgVjyw0wUW9QHiHnjuHpQHcvQF3Cy3p6TecLFlFAuBCbyqjVBuoSnGGw91Fj7/rEq/z666qnCKHufLtQw=="
          ],
          "x5t": "LQV10LQWND65jGNzgE2AzL21bXQ",
          "x5t#S256": "tafv3iROVnDVzTSTHXC49GsAufsPh0VNFVQ2JxeztQY"
        }
      ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-ui-proxy-config
  namespace: registry
  labels:
    app: registry-ui-proxy
data:
  registry.conf: |
    server {
        listen       80;
        server_name  localhost;
        resolver kube-dns.kube-system.svc.cluster.local valid=30s;

        set $keycloak "https://auth.loeffelmeister.de";
        set $registry "http://registry.registry.svc.cluster.local:5000";
        set $ui "http://registry-ui.registry.svc.cluster.local";

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
        chunked_transfer_encoding on;
        # required for strict SNI checking: see Issue #70 (https://github.com/Joxit/docker-registry-ui/issues/70)
        proxy_ssl_server_name on;
        proxy_buffering off;
        proxy_ignore_headers "X-Accel-Buffering";

        location /v2 {
          # Do not allow connections from docker 1.5 and earlier
          # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
          if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
              return 404;
          }
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host               $host;
          proxy_set_header X-Forwarded-Host   $host;
          proxy_pass $registry;
        }

        location /auth {
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host               $host;
          proxy_set_header X-Forwarded-Host   $host;
          proxy_pass $keycloak;
        }

        location /auth/realms/master/protocol/docker-v2/auth {
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Host               $host;
          proxy_set_header X-Forwarded-Host   $host;

          if ($request_method = "OPTIONS") {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "OPTIONS, GET" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
          }

          if ($http_authorization = "") {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "OPTIONS, GET" always;
            add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header WWW-Authenticate 'Basic realm="Keycloak login"' always;
            return 401;
          }

          add_header Access-Control-Allow-Origin $http_origin always;
          add_header Access-Control-Allow-Methods "OPTIONS, GET" always;
          add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization" always;
          add_header Access-Control-Allow-Credentials true always;
          proxy_pass $keycloak;
        }

        location / {
          proxy_pass $ui;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: monitoring-release
  namespace: monitoring
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      version: v71.2.0
  interval: 1m0s
  values:
    namespaceOverride: "monitoring"

    ## Provide custom recording or alerting rules to be deployed into the cluster.
    ##
    additionalPrometheusRulesMap: {}
    #  rule-name:
    #    groups:
    #    - name: my_group
    #      rules:
    #      - record: my_record
    #        expr: 100 * my_record

    ## Configuration for alertmanager
    ## ref: https://prometheus.io/docs/alerting/alertmanager/
    ##
    alertmanager:
      enabled: true
      ## @param alertmanager.enableFeatures Enable access to Alertmanager disabled features.
      ##
      enableFeatures: []

      ## Alertmanager configuration directives
      ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file
      ##      https://prometheus.io/webtools/alerting/routing-tree-editor/
      ##
      # config:
      #   global:
      #     resolve_timeout: 5m
      #   inhibit_rules:
      #     - source_matchers:
      #         - "severity = critical"
      #       target_matchers:
      #         - "severity =~ warning|info"
      #       equal:
      #         - "namespace"
      #         - "alertname"
      #     - source_matchers:
      #         - "severity = warning"
      #       target_matchers:
      #         - "severity = info"
      #       equal:
      #         - "namespace"
      #         - "alertname"
      #     - source_matchers:
      #         - "alertname = InfoInhibitor"
      #       target_matchers:
      #         - "severity = info"
      #       equal:
      #         - "namespace"
      #     - target_matchers:
      #         - "alertname = InfoInhibitor"
      #   route:
      #     group_by: ["namespace"]
      #     group_wait: 30s
      #     group_interval: 5m
      #     repeat_interval: 12h
      #     receiver: "null"
      #     routes:
      #       - receiver: "null"
      #         matchers:
      #           - alertname = "Watchdog"
      #   receivers:
      #     - name: "null"
      #   templates:
      #     - "/etc/alertmanager/config/*.tmpl"

    ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
    ##
    grafana:
      enabled: true
      adminUser: admin
      adminPassword: prom-operator

      # - GF_AUTH_DISABLE_LOGIN_FORM=true
      # - GF_AUTH_BASIC_ENABLED=false
      # - GF_AUTH_OAUTH_AUTO_LOGIN=true
      # - GF_SERVER_ROOT_URL=https://${GRAFANA_SUBDOMAIN}.${DOMAIN}
      # - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      # - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak
      # - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      # - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      # - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://auth.loeffelmeister.de/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth
      # - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://${KEYCLOAK_DOMAIN}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token
      # - GF_AUTH_GENERIC_OAUTH_API_URL=https://${KEYCLOAK_DOMAIN}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo
      # - GF_AUTH_GENERIC_OAUTH_SCOPES=openid email profile roles
      # - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH= contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
      # - GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN=true
      # - GF_AUTH_GENERIC_OAUTH_ADMIN_GROUPS=admin

      # # To make Grafana persistent (Using Statefulset)
      persistence:
        enabled: true
        type: sts
        storageClassName: "longhorn"
        accessModes:
          - ReadWriteOnce
        size: 20Gi
        finalizers:
          - kubernetes.io/pvc-protection

    ## Component scraping etcd
    ##
    kubeEtcd:
      enabled: false

    ## Component scraping kube proxy
    ##
    kubeProxy:
      enabled: false

    ## Deploy a Prometheus instance
    ##
    prometheus:
      enabled: true
      ## Settings affecting prometheusSpec
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api-reference/api.md#prometheusspec
      ##
      prometheusSpec:
        ## Prometheus StorageSpec for persistent data
        ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/platform/storage.md
        ##
        storageSpec:
          # Using PersistentVolumeClaim
          #
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
